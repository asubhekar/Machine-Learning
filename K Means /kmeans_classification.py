# -*- coding: utf-8 -*-
"""KMeans_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgPSu3bxdg1KT7CWjOSQ1OTKM898EUmC

# KNN implementation
"""

#import preprocessing libraries
import pandas as pd
import numpy as np

#algorithm libraries
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

#Metrics libraries
from sklearn.metrics import accuracy_score

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("breast-cancer-wisconsin.csv")
df

# storing the target labels
target = df.iloc[:,-1]
target

#Dropping the unnecessary columns
df = df.drop(columns = ['Sample','Class'])
df.shape

# Converting the missing values denoted by '?' to NaN
df = df.replace({'?': np.NaN})
# Replacing NaN values with the mean values.
df["F6"] = pd.to_numeric(df["F6"])
df['F6'].fillna(df['F6'].mean(), inplace=True)
df['F6'].isnull().sum()

#Splitting the data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size = 0.3)

"""### K - Nearest Neighbors Classifier"""

def knn(k):
    #Initializing the model
    k_neigh = KNeighborsClassifier(n_neighbors=k, metric = 'minkowski')
    #Fitting the model on training data
    k_neigh.fit(X_train,y_train)
    #Predicting the labels values using the test data
    y_pred = k_neigh.predict(X_test)
    #Evaluating the model
    acc = accuracy_score(y_pred, y_test)
    return acc

"""### Evaluating with different values of k"""

# Trying out the model using k = 3
acc_3= knn(k=3)
print(" Accuracy with k:3 =", acc_3)
# Trying out the model using k = 5
acc_5 = knn(k=5)
print("\n Accuracy with k:5 =", acc_5)
# Trying out the model using k = 10
acc_10 = knn(k=10)
print("\n Accuracy with k:10 =", acc_10)

