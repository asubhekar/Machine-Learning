# -*- coding: utf-8 -*-
"""Clustering_BCClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oBD8dkQVDQHNRJ3bWKNGHVo5iPm-c3jl

# Cluster
"""

#import preprocessing libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

#algorithm libraries
import keras
from sklearn.model_selection import train_test_split
from scipy.cluster.hierarchy import linkage, cut_tree
from sklearn.cluster import KMeans

#Metrics libraries
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

# Data visualization libraries
import matplotlib.pyplot as plt

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("wisc_bc_ContinuousVar.csv")
df.shape

#Checking for missing values in the dataset
df.isnull().sum()

# storing the target labels
target = df['diagnosis']
target.replace('M', 1, inplace = True)
target.replace('B', 0, inplace = True)
target

#Dropping the unnecessary columns
features = df.drop(columns = ['id','diagnosis'])
features.shape

"""### Feature Scaling"""

# Feature Scaling
sc = StandardScaler()
feature_scaled = sc.fit_transform(features)

"""### Hierarchial Clustering Model"""

# Initialize the model
dendrogram = linkage(feature_scaled, method="complete")

clusters = cut_tree(dendrogram, n_clusters=2)

results = pd.DataFrame({"diagnosis": df["diagnosis"], "cluster": clusters.ravel()})
tabulated = pd.crosstab(results["diagnosis"], results["cluster"])

tabulated

classification = classification_report(target, clusters)
print(classification)

"""### K-Means Clustering"""

kmeans = KMeans(n_clusters = 2)
clusters = kmeans.fit_predict(feature_scaled)

results = pd.DataFrame({"diagnosis": df["diagnosis"], "cluster": clusters.ravel()})
tabulated = pd.crosstab(results["diagnosis"], results["cluster"])

tabulated

classification = classification_report(target, clusters)
print(classification)

