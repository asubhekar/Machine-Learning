# -*- coding: utf-8 -*-
"""Decision_Tree_BCClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9JNanvGrZdOAbt1I92Pnq1tnr1h9wuP

# CART methodology Implementation
"""

#import preprocessing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#algorithm libraries
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

#Metrics libraries
from sklearn.metrics import accuracy_score

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("breast-cancer-wisconsin.csv")
df

# storing the target labels
target = df.iloc[:,-1]
target

#Dropping the unnecessary columns
df = df.drop(columns = ['Sample','Class'])
df.shape

# Converting the missing values denoted by '?' to NaN
df = df.replace({'?': np.NaN})
# Replacing NaN values with the mean values.
df["F6"] = pd.to_numeric(df["F6"])
df['F6'].fillna(df['F6'].mean(), inplace=True)
df['F6'].isnull().sum()

#Splitting the data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size = 0.3)

"""### Decision Tree Classifier"""

def decision_tree():
    #Initializing the model
    decision_tree = DecisionTreeClassifier()
    #Fitting the model on training data
    decision_tree.fit(X_train,y_train)
    #Predicting the labels values using the test data
    y_pred = decision_tree.predict(X_test)
    #Evaluating the model
    dtree_accuracy = accuracy_score(y_pred, y_test)

    plt.plot(decision_tree.feature_importances_, 'o')
    plt.xticks(range(df.shape[1]), df.columns, rotation=90)
    plt.ylim(0, 1)
    return dtree_accuracy

"""### Evaluating performance and plotting feature importance for data visualization."""

dtree_accuracy = decision_tree()
print(" Decision Tree accuracy without knowing the important features = ", dtree_accuracy)
print("\n Feature importance = ")

"""### Retraining the data with the important features"""

cart = DecisionTreeClassifier(max_depth = 3)
cart.fit(X_train, y_train)
y_pred_cart = cart.predict(X_test)
cart_accuracy = accuracy_score(y_pred_cart, y_test)
print("CART accuracy after knowing the important features = ", cart_accuracy)

"""### Building the Tree Diagram

"""

tree.plot_tree(cart)

