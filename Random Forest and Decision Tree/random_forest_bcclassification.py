# -*- coding: utf-8 -*-
"""Random_Forest_BCClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vmDf-WutzFA-b4_rJpOKIv8doEpzLkqT

# Decision Tree Implementation
"""

#import preprocessing libraries
import pandas as pd
import numpy as np

#algorithm libraries
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

#Metrics libraries
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("breast-cancer-wisconsin.csv")
df

# storing the target labels
target = df.iloc[:,-1]
target

#Dropping the unnecessary columns
df = df.drop(columns = ['Sample','Class'])
df.shape

# Converting the missing values denoted by '?' to NaN
df = df.replace({'?': np.NaN})
# Replacing NaN values with the mean values.
df["F6"] = pd.to_numeric(df["F6"])
df['F6'].fillna(df['F6'].mean(), inplace=True)
df['F6'].isnull().sum()

#Splitting the data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size = 0.3)

"""### Decision Tree Classifier"""

def Random_Forest_Classifier():
    #Initializing the model
    rf = RandomForestClassifier(random_state=42)
    #Fitting the model on training data
    rf.fit(X_train, y_train)
    #Predicting the labels values using the test data
    y_pred = rf.predict(X_test)
    #Evaluating the model
    rf_accuracy = accuracy_score(y_test, y_pred)
    rf_confusion_m = confusion_matrix (y_test, y_pred)
    return rf_accuracy, rf_confusion_m

"""### Evaluating Decision Tree Classifier."""

# Trying out the model using k = 3
rf_accuracy, rf_confusion_m = Random_Forest_Classifier()
print(" Accuracy using Decision Tree Classifier =", rf_accuracy)
print(" Confusion Matrix = \n", rf_confusion_m)