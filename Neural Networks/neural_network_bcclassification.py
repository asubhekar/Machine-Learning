# -*- coding: utf-8 -*-
"""Neural_Network_BCClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emVc-yJCvD7MZaTdinDk-YAKAu9jOjnA

# ANN Methodology
"""

#import preprocessing libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

#algorithm libraries
import keras
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from keras.models import Sequential
from keras.layers import Dense

#Metrics libraries
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

# Data visualization libraries
import matplotlib.pyplot as plt

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("wisc_bc_ContinuousVar.csv")
df.shape

#Checking for missing values in the dataset
df.isnull().sum()

# storing the target labels
target = df['diagnosis']
target.replace('M', 1, inplace = True)
target.replace('B', 0, inplace = True)
target

#Dropping the unnecessary columns
df = df.drop(columns = ['id','diagnosis'])
df.shape

#Splitting the data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size = 0.3)

"""### Feature Scaling"""

# Feature Scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""### Artificial Neural Network Model"""

# Define the model
model = Sequential()
model.add(Dense(units=30, activation='relu', input_dim=30))
model.add(Dense(units=5, activation = 'relu'))
model.add(Dense(units=1, activation='sigmoid'))

model.summary()

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
ann_model = model.fit(X_train, y_train, batch_size=10, epochs=100)

"""### Evaluating Decision Tree Classifier."""

# Plot the loss curve (RMSProp)
tr_loss = ann_model.history['loss']
epochs = [i for i in range(len(tr_loss))]
plt.plot(epochs, tr_loss)
plt.show()

# Plot the loss curve (RMSProp)
tr_accuracy = ann_model.history['accuracy']
epochs = [i for i in range(len(tr_accuracy))]
plt.plot(epochs, tr_accuracy)
plt.show()

# Evaluate the model on the testing set
loss, accuracy = model.evaluate(X_test, y_test)
print('Loss = ', loss*100)
print('Accuracy =', accuracy*100)

# Predicting the labels
y_pred = model.predict(X_test).astype('int32')

confusion_matrix(y_pred, y_test)