# -*- coding: utf-8 -*-
"""NaiveBayes_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NukAK7w_z2FMMbkJ2sxpQF3fr6IlpwwB

# Naive Bayes Implementation
"""

#import preprocessing libraries
import pandas as pd
import numpy as np

#algorithm libraries
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import BernoulliNB

#Metrics libraries
from sklearn.metrics import accuracy_score

"""### Data Processing"""

# loading the dataset in pandas
df = pd.read_csv("breast-cancer-wisconsin.csv")
df

# storing the target labels
target = df.iloc[:,-1]
target

#Dropping the unnecessary columns
df = df.drop(columns = ['Sample','Class'])
df.shape

# Converting the missing values denoted by '?' to NaN
df = df.replace({'?': np.NaN})
# Replacing NaN values with the mean values.
df["F6"] = pd.to_numeric(df["F6"])
df['F6'].fillna(df['F6'].mean(), inplace=True)
df['F6'].isnull().sum()

#Splitting the data into training set and testing set
X_train, X_test, y_train, y_test = train_test_split(df, target, test_size = 0.3)

"""### Naive Bayes Classifier"""

def gaussian_naive_bayes():
    #Initializing the model
    g_naive_bayes = GaussianNB()
    #Fitting the model on training data
    g_naive_bayes.fit(X_train,y_train)
    #Predicting the labels values using the test data
    y_pred = g_naive_bayes.predict(X_test)
    #Evaluating the model
    gaussian_accuracy = accuracy_score(y_pred, y_test)
    return gaussian_accuracy

def multinomial_naive_bayes():
    #Initializing the model
    m_naive_bayes = MultinomialNB()
    #Fitting the model on training data
    m_naive_bayes.fit(X_train,y_train)
    #Predicting the labels values using the test data
    y_pred = m_naive_bayes.predict(X_test)
    #Evaluating the model
    multinomial_accuracy = accuracy_score(y_pred, y_test)
    return multinomial_accuracy

def bernoulli_naive_bayes():
    #Initializing the model
    b_naive_bayes = BernoulliNB()
    #Fitting the model on training data
    b_naive_bayes.fit(X_train,y_train)
    #Predicting the labels values using the test data
    y_pred = b_naive_bayes.predict(X_test)
    #Evaluating the model
    bernoulli_accuracy = accuracy_score(y_pred, y_test)
    return bernoulli_accuracy

"""### Evaluating with different Naive Bayes Classifiers."""

# Trying out the model using k = 3
gaussian_accuracy = gaussian_naive_bayes()
print(" Accuracy with Gaussian Naive Bayes =", gaussian_accuracy)
multinomial_accuracy = multinomial_naive_bayes()
print(" Accuracy with Multinomial Naive Bayes = ", multinomial_accuracy)
bernoulli_accuracy = bernoulli_naive_bayes()
print(" Accuracy with Bernoulli Naive Bayes = ", bernoulli_accuracy)