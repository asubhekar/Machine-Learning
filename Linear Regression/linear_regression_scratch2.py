# -*- coding: utf-8 -*-
"""Linear_Regression_Scratch2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTPy3_0--APUqnD4nQX0k6IZncXRC2R7

# Linear Regression

#### Objective: To predict the cooling load (y2 in the datasets)

Suppose we consider the following three models to predict the cooling load on this dataset, including 1)
Lasso regression, 2) Ridge regression, and 3) Elastic Net regression. Please use 5-fold cross validation to
compare their performance based on mean squared error (MSE). To implement these models, you can use
python and the sklearn packages. Please submit the code along with your solutions to get full points.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import cross_val_score

"""### Data Preprocessing

"""

def preprocessing(df):

    #separating features and targets
    features = df.iloc[:, :-1]
    target_label = df.iloc[:, -1]

    #Splitting the data into training set and validation set
    X_train, X_test, y_train, y_test = train_test_split(features, target_label, test_size = 0.2)


    #Standardizing features
    scaler = MinMaxScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)



    return X_train, X_test, y_train, y_test, features

#Data Summary
print("\nTraining set feature size = ", X_train.shape)
print("Training set label size = ", y_train.shape)
print("\nValidation set feature size = ", X_test.shape)
print("Validation set label size = ", y_test.shape)

"""### Regression  """

#Lasso Regression
def lasso(X_train, y_train):
    #initialization
    lasso_r = Lasso(0.1)

    #cross validaton using lasso
    cv_lasso = cross_val_score(lasso_r, X_train, y_train, cv=5, scoring = 'neg_mean_squared_error')
    mean_cv_lasso = np.mean(cv_lasso)/-1
    print("\n Lasso regression cross validation score = ", mean_cv_lasso)

    return mean_cv_lasso

def ridge(X_train, y_train):
    #initialization
    ridge_r = Ridge(0.1)

    #cross validaton using lasso
    cv_ridge = cross_val_score(ridge_r, X_train, y_train, cv=5, scoring = 'neg_mean_squared_error')
    mean_cv_ridge = np.mean(cv_ridge)/-1
    print("\n Ridge regression cross validation score = ", mean_cv_ridge)

    return mean_cv_ridge

def elasticnet(X_train, y_train):
    #initialization
    elastic_r = ElasticNet(0.1)

    #cross validaton using lasso
    cv_elastic = cross_val_score(elastic_r, X_train, y_train, cv=5, scoring = 'neg_mean_squared_error')
    mean_cv_elastic = np.mean(cv_elastic)/-1
    print("\n Elastic regression cross validation score = ", mean_cv_elastic)

    return mean_cv_elastic

#importing dataset
df = pd.read_excel('ENB2012_data.xlsx')

#preprocessing the data
X_train, X_test, y_train, y_test = preprocessing(df)

# Regression
lasso_average_crossval = lasso(X_train, y_train)
ridge_average_crossval = ridge(X_train, y_train)
elastic_average_crossval = elasticnet(X_train, y_train)

"""### Observations
On using 5-fold cross validation on all the used models, we can observed that the mean squared error is the least while using Ridge regression. So we fit this model on the validation data.

"""

# initializing regressor
ridge = Ridge()

# fitting regressor on training data
ridge.fit(X_train, y_train)

# testing model on unknown data
y_predicted = ridge.predict(X_test)

# mean squared error
print("\Mean Squared Error: ", mean_squared_error(y_test, y_predicted))

features

